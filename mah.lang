Semicolon: ";";
BraceOpen: "[{]";
BraceClose: "[}]";
ParenOpen: "[(]";
ParenClose: "[)]";
Add: "[+]";
Pow: "\*\*";
Mul: "[*]";
Sub: "-";
TrueDiv: "//";
Eq: "[=]{2}";
Neq: "[!][=]";
Lt: "[<]";
Gt: "[>]";
And: "&";
Or: "[|]";
Div: "/";
Mod: "%";
Assign: "[=]";
Let: "let";
Print: "print";
Input: "input";
Sin: "sin";
Cos: "cos";
Coma: ",";
If: "if";
Elif: "elif";
Else: "else";
While: "while";
Break: "break";
Continue: "continue";
Return: "return";
Def: "def";
Number: "\d+(?:\.\d+)?";
ID: "[a-zA-Z_$](?:\w|$)*";
!Comment: "#.*";
--

Start ->
	Stmts @nop
;

Stmts ->
	Stmt OptionalSemicolon Stmts'
;

OptionalSemicolon -> 
	#Semicolon OptionalSemicolon
|	#e
;

Stmts' ->
	Stmts
|	#e
;

Stmt ->
	Print
|	Declaration
|	ID CallOrAssign
|	If
|	While
|	#Break @break
|	#Continue @continue
|	#Return MaybeExpr @ret
|	FunctionDef
|	CodeBlock
;

MaybeExpr ->
	Expr
|	@fn_ret_inject_zero #Semicolon
;

CallOrAssign ->
	Call
|	Assignment
;

Expr -> 
	Condition
;

Condition ->
	Compare Condition'
;

Condition' ->
	#Or Compare @or Condition'
|	#And Compare @and Condition'
|	#e
;

Compare ->
	Exp Compare'
;

Compare' ->
	#Eq Exp @eq Compare'
|	#Neq Exp @neq Compare'
|	#Lt Exp @lt Compare'
|	#Gt Exp @gt Compare'
|	#e
;

Exp ->
	Term Exp'
;

Exp' ->
	#Add Term @add Exp'
|	#Sub Term @sub Exp'
|	#Mod Term @mod Exp'
|	#e
;

Term ->
	Unary Term'
;

Term' ->
	#Mul Unary @mul Term'
|	#Div Unary @div Term'
|	#TrueDiv Unary @truediv Term'
|	#e
;

Unary ->
	#Sub Unary @negate
|	Pow
;

Pow ->
	Factor Pow'
;

Pow' ->
	#Pow Pow @pow
|	#e
;

Factor ->
	#ParenOpen Expr #ParenClose
|	ID MaybeCallWithValue
|	Sin
|	Cos
|	Num
|	Input
;

MaybeCallWithValue -> 
	CallWithValue
|	#e
;

ID ->
	@pid #ID
;

Print ->
	@init_call #Print #ParenOpen Args #ParenClose @print
;

Input ->
	@init_call #Input #ParenOpen #ParenClose @input
;

Sin ->
	@init_call #Sin #ParenOpen Args #ParenClose @sin
;

Cos ->
	@init_call #Cos #ParenOpen Args #ParenClose @cos
;

Declaration ->
	#Let @setpid #ID #Assign Expr @assign
;

Assignment ->
	#Assign Expr @assign
;

Num ->
	@num #Number;

Args ->
	Expr Args'
|	#e
;

Args' ->
	#Coma Args
|	#e
;

CodeBlock ->
	#BraceOpen @scopestart Stmts' @scopeend #BraceClose
;

If ->
	#If Expr @freeze @save CodeBlock @jmpfalse Elif
;

Elif ->
	@omit #Elif Expr @save CodeBlock @jmpfalse Elif
|	Else @omit
;

Else ->
	#Else @save CodeBlock @jmptrue
|	#e
;

While ->
	#While @savewhile @savewhile Expr @save CodeBlock @jmpwhile
;

FunctionDef ->
	@save #Def @init_fn_def #ID
		@scopestart #ParenOpen FunctionParams #ParenClose CodeBlock @fn_ret_inject_zero @ret @save_fn_def  @jmp @scopeend
;

FunctionParams ->
	@setpid #ID FunctionParams'
| #e
;

FunctionParams' ->
	#Coma @setpid #ID FunctionParams'
|	#e
;

Call ->
	@init_call_local #ParenOpen Args @call #ParenClose;

CallWithValue ->
	@init_call_local #ParenOpen Args @callwithvalue #ParenClose;
